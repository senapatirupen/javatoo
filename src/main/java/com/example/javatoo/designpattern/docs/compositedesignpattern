Composite Design Pattern
------------------------
Composite design pttern is used when we have to represent a part whole hierarchy.
When we need to create a structure in a way that the objects in the structure has to be treated the same way, we can apply composite design pattern.

Composite pattern consists of following objects:
> Base Componenet - Base component is the interface for all objects in the composition, client program uses base component to work with the objects in the composition. It can be interface or an abstract class with some methods common to all the objects
> Leaf - Defines the behaviour for the elements in the composition. It is the building block for the composition and implements base component. It does not have references to other components.
> Composite - It consists of leaf elements and implements the operations in base component.

//composite pattern base component
public interface Shape{
	public void draw(String fillColor);
}

//coposite pattern leaf objects
public class Triangle implements Shape{
	@Override
	public void draw(String fillColor){
		System.out.println("Drawing Triangle with color "+fillColor);
	}
}

public class Circle implements Shape{
	@Override
	public void draw(String fillColor){
		System.out.println("Drawing Circle with color "+fillColor);
	}
}

//composite objects
A composite object contains group of leaf objects and we should provide some helper methods to add or delete leafs from the group. We can also provide a method to remove all the elements from the group.

public class Drawing implemnts Shape{
	//collection of shapes
	private List<Shape> shapes = new ArrayList<Shape>();
	
	@Override
	public void draw(String fillColor){
		for(Shape sh: shapes){
			sh.draw(fillColor);
		}
	}
	
	//adding shape to drawing
	public void add(Shape s){
		this.shapes.add(s);
	}
	//removing shape from drawing
	public void remove(Shape s){
		shapes.remove(s);
	}
	//removing all the shapes
	public void clear(){
		System.out.println("Clearing all the shapes from drawing");
		this.shapes.clear();
	}
}

//Composite pattern test
public class TestCompositePattern{
	public void main(String[] args){
		Shape tri = new Triangle();
		Shape tri1 = new Triangle();
		Shape cir = new Circle();
		Drawing drawing = new Drawing();
		drawing.add(tri1);
		drawing.add(tri1);
		drawing.add(cri);
		drawing.draw("Red");
		drawing.clear();
		drawing.add(tri);
		drawing.add(cir);
		drawing.draw("Green");
	}
}

> Composite pattern should be applied only  when the group of objects should behave as the single object.
> Composite design pattern can be used to create a tree like structure.
> Ex java.awt.Container#add(Component)
