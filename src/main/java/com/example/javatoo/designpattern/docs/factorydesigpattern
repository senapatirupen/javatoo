Factory design pattern is used when we have a super class with multiple sub-classes and absed on input, we need to return one of the sub-class. This pattern take out the
responsibility of instantiation of a class from client program to the factory class

> Super class in factory design pattern can be an interface, abstract class or a normal java class.

public abstract class Flight {
    public abstract String getSpeed();
}

public class Indigo extends Flight {
    private String speedPerHour;
	public Indigo(String speedPerHour){
		this.speedPerHour = speedPerHour;
	}
	
	@Override
	public String getSpeed(){
		return this.speedPerHour;
	}
}

public class AirAsia extends Flight {
	private String speedPerHour;
	public AirAsia(String speedPerHour){
		this.speedPerHour = speedPerHour;
	}
	
	@Override
	public String getSpeed(){
		return this.speedPerHour;
	}
}

> Now that we have super classes and sub-classes ready, we can write our factory class.

public class FlightFactory {
    public static Flight getFlight(String speedPerHour){
		if("200".equalsIgnoreCase(speedPerHour))
			return new Indigo(speedPerHour);
		if("150".equalsIgnoreCase(speedPerHour))
			return new AirAsia(speedPerHour);
		return null;
	}
}

Some important points about Factory Design Pattern
> We can keep Factory class Singleton or we can keep the method that returns that subclass as static.
> Notice that based on the input parameter, different subclass is created and returned. getFlight is tha factory method.

Advantages
> Factory design pattern provides approach to code for interface rather than implementation.
> Factory pattern removes the instantiation of actual implementation classes from client code. Factory pattern makes out code more robust, less coupled and easy to extend. For example, we can easily change Flight class implementation because client program is unaware of this.
> Factory pattern provides abstraction between implementation and client class through inheritance

Example: java.util.Calendar, ResourceBundle and NumberFormat getInstance() methods uses Factory pattern.
valueOf() method in wrapper classes like Boolean, Integer etc
