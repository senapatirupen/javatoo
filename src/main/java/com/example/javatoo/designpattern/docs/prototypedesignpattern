Prototype Design Pattern
------------------------
Prototype design pattern is used when the object creation is a costly affair and requires a lot of time and resources and you have a similar object already existing.

Prototype pattern provides a mechanism to copy the original object to a new object and then modify it according to our needs. Prototype design pattern uses java cloning to copy the object.

Suppose we have an object that loads data from database. Now we need to modify this data in our program multiple times, so it's not a good idea to create the object using new keyword and load all the data again from database. The better approach would be to clone the existing object into a new object and then do the data manipulation.

public class Employees implements Cloneable{
	private List<String> empList;
	public Employees(){
		empList = new ArrayList<String>();
	}
	public Employees(List<String> list){
		this.empList = list;
	}
	public void loadData(){
		//read all employees from db
		empList.add("alok");
		empList.add("senapati");
	}
	
	public List<String> getEmpList(){
		return empList;
	}
	
	@Override
	public Object clone() throws CloneNotSupportedException {
		List<String> temp = new ArrayList<String>();
		for(String s: this.getEmpList()){
			temp.add(s);
		}
		return new Employees(temp);
	}
}

public class PrototypePatternTest{
	public static void main(String[] args) throws CloneNotSupportedException {
		Employees emps = new Employees();
		emps.loadData();
		
		//use the clone method to get the Employee object
		Employees empsNew = (Employees) emps.clone();
		Employees empsNew1 = (Employees) emps.clone();
	}
}
