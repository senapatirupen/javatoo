Template Design Pattern
-----------------------
It is used to create a method stub and deferring some of the steps of implementation to the subclasses.

> Template method defines the steps to execute an algorithm and it can provide default implementation that might be common for all or some of the subclasses.
> Lets understand this pattern with an example, suppose we want to provide an algorithm to build a house. The stpes need to be performed to build a house are-building fundation, pillars, walls and windows. The important point is that the we can't change the order of execution because we can't build windows before building the foundation. So in this case we can create a template method that will use different methods to build the house.
> Now building the foundation for a house is same for all type of houses, whether tis a wooden house or a glass house. So we can provide base implementation for this, if subclasses want to override this method, they can but mostly it's common for all the types of houses.
> To make sure that subclasses don't override the template method, we should make it final.

public abstract class HouseTemplate{
	//template method, final so subclasses can't override
	public fianl void buildHouse(){
		buildFoundation();
		buildPillars();
		buildWalls();
		buildWindows();
		System.out.println("House is built.");
	}
	//default implementation
	private void buildWindows(){
		System.out.println("Building Glass Windows");
	}
	//methods to be implemented by subclasses
	public abstract void buildWalls();
	public abstract void buildPillars();
	
	private void buildFoundation(){
		System.out.println("Building fondation with cement, iron rods and sand");
	}
}

public class WoodenHouse extends HouseTemplate{
	@Override
	public void buildWalls(){
		System.out.println("Building Wooden Walls");
	}
	@Override
	public void buildPillars(){
		System.out.println("Building Pillars with Wood coating");
	}
}

public class GlassHouse extends HouseTemplate {
	@Override
	public void buildWalls(){
		System.out.println("Building Glass Walls");
	}
	@Override
	public void buildPillars(){
		System.out.println("Building Pillars with glass coating");
	}
}

public class HousingClient{
	public static void main(String[] args){
		HouseTemplate houseType=new WoodenHouse();
		//using template method
		houseType.buildHouse();
		System.out.println("******");
		houseType=new GlassHouse();
		houseType.buildHouse();
	}
}

> notice that client is invoking the template method of base class and depending of imeplementation of different steps, it's using some fo the methods from base class and some of them from subclass.

example: java.io.InputStream, java.io.OutputStream, java.io.Reader, java.io.Writer
all collections

> Template method should consists of certain steps whose order is fixed and for some of the methods, implementation differs from base class to subclass. Template method should be final.
> Most of the times, subclasses call methods from super class but in template pattern, superclass template method calss methods from subclasses, this is know as Hollywood Principle- "don't call us. we will call you."
> Methods in base class with default implementation are regerred as Hooks and they are intended to be overriden by subclass, if you want some of the methods to be not overriden, you can make them fianl, for example in our case we can make buildFoundation() method fianl because if we don't want subclass to override it.
