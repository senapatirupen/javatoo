Adapter Design Pattern
----------------------
Adapter design pattern is one of the structural design pattern and its used so that two unrelated interfaces can work togethe. The object that joins these unrelated interface is called an Adapter.

Mobile battery needs 3 volts to charge but the normal socket produces either 120v(US) or 240(India).
So the mobile charger works as an adapter between mobile charging socket and the wall socket.


public class Volt{
	private int volts;
	public Volt(int volts){
		this.volts = volts;
	}
	//getter and setter
}

public class Socket{
	public Volt getVolt(){
		return new Volt(120);
	}
}

public interface SocketAdapter {
	public Volt get120Volt();
	public Volt get240Volt();
}

> While implementing Adapter pattern, there are two approaches: class adapter and object adapter
however both these approaches produces same result

class adapter : this form uses java inheritance and extends the source interface. in out case socket class
object adapter : this form uses java composition and adapter contains the source object

public class SocketObjectAdapterImpl implements SocketAdapter {
	private Socket socket = new Socket();
	@Override
	public Volt get120Volt(){
		return socket.getVolt();
	}
	@Override
	public Volt get240Volt(){
		Volt volt = socket.getVolt();
		return convertVolt(volt, 120);
	}
	
	private Volt convertVolt(Volt volt, int i){
		return new Volt(volt.getVolts()+120);
	}
}

Some of the adapter design pattern example I could easily find in JDK classes are;

java.util.Arrays#asList()
java.io.InputStreamReader(InputStream) (returns a Reader)
java.io.OutputStreamWriter(OutputStream) (returns a Writer)
